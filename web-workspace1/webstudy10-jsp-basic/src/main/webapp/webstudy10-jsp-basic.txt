ㅁ jsp
	ㅁ 개념	
		* java server page, server 상에서 제공하는 동적 page를 의미한다.
		* 동적 웹페이지를 위한 기술(Template Engine), 즉 틀만 제공하며 내부적인 data/content는 client 측에서 결정한다.
		* HTML 문서 구조 상에서, java 코드를 삽입하는 형태로 개발
		* jsp는 WAS에 의해 .jsp->.java->.class로 생성된다.
			ㄴ 생성된 jsp class는 HttpServlet의 자식클래스이며, is a relationship이다(jsp is a HttpServlet).
	ㅁ Web MVC에서 model 역할을 담당한다.
		ㄴ model : java component(VO/DAO) / View : jsp / Controller : Servlet
	ㅁ 기본 문법
		* 결국 jsp는 servlet의 service나 out.println 등에 삽입되는 코드이다.
			ㄴ 동작 : java, <%
			ㄴ 출력(인터페이스) : HTML
		ㅁ 주석 : <%-- --%>
		ㅁ 스크립틀릿 : Scriptlet, java코드를 삽입하기 위핸 태그의 일종, servlet의 service 메서드 내에 삽입되는 코드
			ㄴ <% java code %>
		ㅁ expression : service 메서드내의 out.println()로 삽입되는 코드
			ㄴ <%= java code %>
			ㄴ <%= i %>, 맥주0-1-2-,...로 하나의 변수로 사용되는 태그이다.
		ㅁ declaration : 메서드 정의시 사용
			ㄴ <%! %>
		ㅁ directive : 현 jsp 문서정보를 web container에 전달하며, 자동으로 생성되는 태그
			ㄴ 한글처리방식, 문서타입, import 등
			ㄴ <%@ %> **import에 사용
		ㅁ HTML과 같은 위치에서 개발된다.
	※ <!@ import 유의한다.

ㅁ jsp life cycle
	* JSP life cycle = Servlet
		ㄴ 단, jsp는 java class로 생성 및 컴파일 후 실행
	* Servlet life cycle과 매우 유사, 정해진 형태를 사용하면 된다(init/destroy -> 멤버변수, %! / service -> %)
	<%!> : 
	<%!
	public void JspInit() {
		System.out.println("JspInit()");
	}
	
	public void jspDestroy(){
		System.out.println("JspDestroy()");
	}
	%>
	<%
	System.out.println("jspService()");
	%>
		