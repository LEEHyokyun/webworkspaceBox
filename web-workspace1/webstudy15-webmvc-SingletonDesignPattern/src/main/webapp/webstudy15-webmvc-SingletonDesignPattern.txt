ㅁ Singleton Design Pattern
	ㅁ 시스템에서 단 하나의 객체만 생성하여 운용하겠다가 핵심.
		* FindServlet, AllListServelt 등, ProductDAO 객체를 요청시마다 반복적으로 생성하여 내부적으로 복잡해진다.
		* Singleton의 핵심은, 요청을 할때마다 반복해서 servlet이 DAO객체를 생성하는 것이 아닌, DAO객체를 "한번만 생성하여 공유하는 것"이다.
	ㅁ public class CompanyDAO..
		ㄴ 1) 외부 클래스에서 객체생성을 막는다 -> private
		ㄴ 2) 이후 생성된 (static 메소드를 통해생성한) 생성자 객체를 공유하게 되며
		ㄴ 3) meta space에 적재된 생성자 객체를 통해, CompanyDAO 객체를 생성하지 않아도 해당 객체를 공유할 수 있게 된다.
	ㅁ 즉, ProductDAO 객체는 최초 1번만 생성하면 되고, 그 이후엔 static하게 접근하여 사용하면 된다.
		ㄴ 반복적인 객체생성X
		ㄴ 코드간결화
	ㅁ Spring framework에서 사용, 제공하는 방식
		* private 생성자 : constructor에 private access modifier, 외부에서 객체 생성 차단
		* private static 멤버변수로 자신의 객체를 생성, private static 멤버변수는 클래스 로딩시 한번 초기화.
			ㄴ heap 영역에 개체생성, 객체 주소값을 meta space에 static 변수로 저장 
		* public static 메서드로 외부에 현 객체를 공유, 외부에서 별도 객체생성없이 객체 주소값을 외부에서 이용
			ㄴ
			public class ProductDAO {
				//class loading시 instance 변수에 객체 주소값이 저장됨
				private static ProductDAO instance = new ProductDAO();
	
				private ProductDAO() {
					System.out.println("ProductDAO 생성되었습니다.");
				}
	
				//외부에서 현 객체를 이용할 수 있도록 getInstance() method 생성
				public static ProductDAO getInstance() {
					return instance;
				}
				
ㅁ MVC Pattern에서의 session
	ㅁ