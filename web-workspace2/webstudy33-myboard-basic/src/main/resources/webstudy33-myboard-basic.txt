ㅁ requirements
	* 아이템 기획
	* 팀빌딩(역할분담, 협업방식 및 도구)

	* DEVELOP 1 requirements
	ㅁ 회원제 커뮤니티 게시판
	ㅁ 비로그인 상태에서는 게시판 리스트 정보만 게시
	ㅁ 메인 화면 상단부에서는 로그인 폼 제공
		* 사용자가 로그인하면, 상단부 영역에서는 로그인 폼대신 홈(링크), 글쓰기(링크) 회원이름 로그아웃(링크) 폼 제공
		* 로그인시 리스트의 제목부분에 링크가 부여되어, 게시물 상세보기가 제공
	ㅁ 리스트에서는 게시물 번호, 제목, 작성자명, 작성일, 조회수 제공
		* 리스트 게시물은 최신 등록순으로 정렬되어 제공
	ㅁ 상세 게시물 정보는 게시물번호, 제목, 작성자, 작성일시, 조회수, 게시물 본문내용이 제공
		* 회원 자신이 작성한 게시물의 경우, 상세 게시물 정보 하단에 삭제/수정버튼 제공
		* 삭제버튼 클릭시 삭제하시겠습니까? 의사 재확인후 삭제 및 리스트로 이동
		* 수정버튼 클릭시 수정하시겠습니까? 의사 재확인후 수정페이지로 이동
		* 수정폼은 제목, 본문내용 수정가능하며, 수정 후 수정하기 버튼 클릭시 수정 및 리스트로 이동
	ㅁ 로그아웃 링크 클릭시 의사 재확인후(로그아웃 하시겠습니까?) 확인버튼 눌렀을때 로그아웃 처리
		* 로그아웃 처리 후, 리스트의 제목부분 링크는 비활성화 처리
	ㅁ 상단부 글쓰기 링크를 회원이 클릭하면, 게시물 작성폼이 제공되고 제목, 본문내용 작성
		* 글쓰기 버튼 클릭시 게시글 등록, 게시물 리스트 화면으로 이동한다.
	ㅁ 리스트 화면에서 상세 글보기를 위해 제목을 클릭해서 상세 글보기 화면 제공되는 시점에 조회수를 증가
	
	* 요구분석
	1) UseCase Diagram, UI 설계
		* UI대략적 구성 이후 업무 분석 권장
	2) 설계
		* DB Modeling > ERD, UI 설계, Class Diagram 및 File List
		* 개발환경 및 적용기술
		* UI설계(PostVO와 MemberVO class 간 관계정의 - PostVO는 MemberVO를 반드시 소유하고 있어야 한다)
	3) FileList 설계
		* Model, Controller -> classdiagram
		* View -> index.jsp (jsp forward, HomeController)
				-> header.jsp : 상단부 메뉴(로그인폼, 로그인시 로그아웃, 글쓰기 링크 제공)
				-> layout.jsp : main UI이자 template(틀), JSTL로 c:import 제공
		* path -> css/myhome.css, member/login-fail.jsp
				-> board/list.jsp(*게시물 리스트, 로그인 시에만 링크 적용), board/post-detail.jsp, board-update.jsp
				-> board/write.jsp(글쓰기 폼 제공)
	4) 개발환경 및 적용기술
		* 개발환경 : JDK/1.8, WAS/Apache Tomcat/8.5, DB/Oracle 11 xe  
		* 적용기술 : JavaSE, JDBC, SQL, Servlet/JSP, html, css, bootstrap, Javascript, Ajax, UML, ERD
		* 디자인패턴 : MVC, FrontController, Singleton
	5) 구현(백로그)
		TO DO List : class 기본 구성(Model, Controller), view main UI(layout.jsp)
		Doing : - 
		Done : -