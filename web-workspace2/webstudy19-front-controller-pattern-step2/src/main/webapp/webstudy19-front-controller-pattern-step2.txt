ㅁ front/pattern
	ㅁ front - client와 맞닿는 영역(부분)
	ㅁ pattern - 재사용이 가능한 설계 패턴

ㅁ Front Controller pattern 
	ㅁ 다수의 client는 반드시 FrontControllerServlet을 거친다.
		ㄴ 하나의 진입점
		ㄴ 기존 web MVC : 1client -> 1Servlet
	ㅁ 웹 어플리케이션 서비스의 공통 정책을 일관성있게 효과적으로 처리가능.
		ㄴ 인코딩 처리, 보안(인증/인가), 예외처리, 데이터 수집, 마케팅 정책
		ㄴ 코드 중복 최소화 가능
	ㅁ FrontController 적용 전 WebMVC 구조
		* client 1 -- 검색요청 -- FindMemberByIdServelt
	ㅁ FrontController 적용 후 WebMVC 구조
		* client 1,2,.. -- 검색요청 -- FrontControllerServlet -- 
			ㄴ 다양한 요청에 대해 하나의 Servlet이 처리한다.
			ㄴ 이 요청의 구분을 위해서는 form의 hidden tag를 이용, command name을 통한 value 전송
				ㄴ 최종적으로는 FrontControllerServlet이 이를 인지
			ㄴ QueryString 방식을 이용하는 방식도 활용가능
	ㅁ FrontControllerServlet 구조
		ㅁ doDispatch()
		ㅁ doGet(){
				doDispatch();
			}
		ㅁ doPost(){
			//encoding
			doDispatch();
			}
		※ view로 부터 client 요청값(command)를 받고, command value에 따라 doDispatch에서 요청을 처리한다.
		※ 실질적인 로직처리는 doDispatch에서 진행하며, doPost나 doGet은 전달하는 역할만 한다.
	ㅁ doDistapatch의 과잉 억제(분기처리 간결화)방안
		ㅁ client의 다양한 요청을 처리하기위해 로직개선
			1) 각 요청별 메서드 분할
				* doDispatch( if... ) -> doDispatch()에서 findbycar, register 등의 메서드를 호출하는 방식.
				ㄴ 그러나 이 방법 또한 결국 FrontControllerServlet에서 모두 처리하여 과부하, 생산성 및 유지보수성 저하.
			2) 그 분할한 개별적인 메서드들을 별도의 클래스로 분화, 독립적인 단위로 개발 및 운영하도록 변경
				* client -- 검색 -- FrontController -- FindByNoController -- Model.
				* client -- 등록 -- FrontController -- RegisterServlet -- Model.
					ㄴ FrontController에서 분할!
				※ key point : 분할된 controller servlet을 사용하기위한 계층구조 생성
					ㄴ 각 class는 req, res인자를 넘겨받으며 최종적으로는 view jsp로 전달한다.
				ㄴ 그러나 이 방법 결국, 객체생성 및 메소드 생성에서의 반복과 과부하가 발생한다.
			3) 계층 구조를 통한 다형성 적용, 
				* Dispatch에서 객체생성 및 해당 메소드를 사용
					ㄴ controller.findCarByNo(req, res).
					ㄴ 결국 결합도가 높은 상태(해당 메소드 이름 등 바뀌면 사용X)
			
ㅁ refactoring 
	ㅁ 결과 변동없이 코드의 구조를 재정의
	ㅁ 코드구조개선을 통한 생산성 향상 및 유지보수 향상, 가독성 향상
